;注意点
;この関数自体ループ内で呼ばれる前提なので、ループを使用するとO(n^2)になる。TMP化できるものはTMPを利用すること。
@AI_ACTION(勢力)
#DIM 勢力
#DIM 攻撃兵数
#DIM 都市
#DIM 部隊
#DIM キャラ
#DIM USETIME
SETCOLOR COUNTRY_COLOR:勢力
PRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%思考中……
RESETCOLOR

;ランダムキャラを使用している場合
IF FLAG:ランダムキャラ使用
	;士官数が足りなければ士官を募集
	CALL RECRUIT_AI(勢力)
ENDIF

;外交の処理
SIF DAY >= SLG_PP:0 && !IS_SP_COUNTRY(勢力)
	CALL SLG_AI_DIPLOMACY(勢力)


;都市をもたない（野盗など）ならスキップする
SIF TMP_OWN_CITY:勢力 < 1
	GOTO NORMAL_AI_THINK_ENDED

;こっから先軍事なので軍事開始してなければスキップ
SIF DAY < SLG_PP:1
	GOTO NORMAL_AI_THINK_ENDED

CALL AI_DEPLOY_ARMY(勢力)

;防衛を全て解除
FOR 都市, 1, GET_CITY_NUM() + 1
	IF CITY_OWNER:都市 == 勢力
		;敵部隊のいる都市は解除不可
		IF !TMP_IS_STAY_ENEMY_UNIT(都市, 勢力)
			COUNTRY_SOLDIER:勢力 += CITY_SOLDIER:都市
			CITY_SOLDIER:都市 = 0
			CITY_COMMANDER:都市 = 0
		ENDIF
	ENDIF
NEXT

;方針の設定
CALL SLG_AI_SETDOCTRINE(勢力)

;既存部隊のうち、おかしな状況に陥っちゃってるものを解体する
CALL SLG_AI_FORCE_CLEAR_UNIT(勢力)

;このターン攻撃にさく兵力と防御にさく兵力を決定する
CALL SLG_AI_DECIDE_SOLDIER_NUM(勢力)
攻撃兵数 = RESULT:0

;既存部隊に兵力を補充する
CALL SLG_AI_REPLENISH_SOLDIER_TO_UNIT(勢力, 攻撃兵数)
攻撃兵数 = RESULT

;救出
CALL SLG_AI_RESCUE(勢力, 攻撃兵数)
攻撃兵数 = RESULT

;部隊の侵攻判定
FOR 部隊, 0, MAX_UNIT
	;既存部隊の場合、移動できない連中は飛ばす
	IF UNIT_SOLDIER:勢力:部隊 > 0
		;敵がいるなら飛ばす
		SIF TMP_IS_STAY_ENEMY_UNIT(UNIT_POSITION:勢力:部隊, 勢力)
			CONTINUE
		;すでに目的地があるなら飛ばす
		SIF UNIT_TARGET:勢力:部隊
			CONTINUE
		;敵の土地にいるなら飛ばす
		SIF TMP_COUNTRY_RELATION:勢力:(CITY_OWNER:(UNIT_POSITION:勢力:部隊)) == 0
			CONTINUE
		;許容疲労度を超えていたら解体
		;余剰兵力は攻撃に振り分ける
		IF UNIT_TIRED_COUNT:勢力:部隊 > AI_ARMY_PROPERTY:(COUNTRY_AI_TYPE:勢力):AI_許容疲労度
			;DEBUGPRINTFORML  %ANAME(GET_COUNTRY_BOSS(勢力))%の{部隊}部隊　疲労度限界越えにつき解体 疲労度:{UNIT_TIRED_COUNT:勢力:部隊} 許容:{AI_ARMY_PROPERTY:(COUNTRY_AI_TYPE:勢力):AI_許容疲労度}
			攻撃兵数 += UNIT_SOLDIER:勢力:部隊
			CALL CLEAR_UNIT(勢力, 部隊)
			CONTINUE
		ENDIF
	;既存部隊でなければ、部隊の作成を試みる
	ELSEIF UNIT_SOLDIER:勢力:部隊 <= 0
		CALL SLG_AI_CREATE_UNIT(勢力, 部隊, 攻撃兵数)
		;作れなかったら飛ばす
		SIF 攻撃兵数 == RESULT
			CONTINUE
		攻撃兵数 = RESULT
	ENDIF
	;攻撃先の決定
	CALL SLG_AI_INVASION_SETTARGET(勢力, 部隊)
NEXT

;;#;FOR 部隊, 0, MAX_UNIT
;;#;	SIF UNIT_SOLDIER:勢力:部隊 > 0
;;#;			DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%の{部隊}部隊 兵数{UNIT_SOLDIER:勢力:部隊} 現在地%GET_CITYNAME(UNIT_POSITION:勢力:部隊)% 目的地%GET_CITYNAME(UNIT_TARGET:勢力:部隊)%
;;#;NEXT


CALL SLG_AI_DEFENSE(勢力)
;通常のAI思考終了
$NORMAL_AI_THINK_ENDED


;クールタイム減少処理と、このターンに割り当てたフラグ削除処理
IF 勢力 != CFLAG:MASTER:所属
	FOR キャラ, 0, CHARANUM
		IF CFLAG:キャラ:所属 == 勢力
			COOLTIME:キャラ:0 = MAX(COOLTIME:キャラ:0 - 1 , 0)
			ASSIGNED_THIS_TURN:キャラ:0 = 0
		ENDIF
	NEXT
ENDIF

CALL SINGLE_EMPTY_LINE()

;-----------------------------------------------
;残存兵数における、攻撃兵にまわす兵数・防御にまわす兵数を決定する処理
;-----------------------------------------------
@SLG_AI_DECIDE_SOLDIER_NUM(勢力)
#DIM 勢力
#DIM 都市
#DIM 攻撃スコア合計
#DIM 防衛スコア合計
#DIM 比率
#DIM 攻撃兵数
#DIM 防衛兵数
VARSET 攻撃スコア合計
VARSET 防衛スコア合計
FOR 都市, 1, GET_CITY_NUM() + 1
	;そこが敵の都市で、かつ自勢力と接続しているなら、攻撃スコアに加算
	;防衛スコアと比較すると、算出方法の兼ね合いで10000倍くらいしてトントン(攻撃スコアは経済 / 防衛倍率、防衛スコアは経済 * 防衛倍率)
	IF TMP_IS_INVADABLE:勢力:都市
		攻撃スコア合計 += TMP_OFFENSIVE_IMPORTANCE:勢力:都市 * 10000
	ENDIF
	;そこが自勢力の都市で、敵から殴られうるなら、防衛スコアに加算
	SIF CITY_OWNER:都市 == 勢力 && TMP_CITY_RISK:勢力:都市 >= 2
		防衛スコア合計 += TMP_DEFFENSIVE_IMPORTANCE:勢力:都市
NEXT

;攻撃スコアが0なら攻めるべき場所がないので、すべて防衛に回しておく
;唯一隣接している勢力と停戦した場合、これがないとエラー落ちする
IF 攻撃スコア合計 == 0
	RETURN 0, COUNTRY_SOLDIER:勢力
ENDIF


;DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%の攻撃スコア{攻撃スコア合計} 防衛スコア{防衛スコア合計}
比率 = 攻撃スコア合計 * 1000 / (攻撃スコア合計 + 防衛スコア合計)

攻撃兵数 = MIN(COUNTRY_SOLDIER:勢力 * 比率 / 1000, COUNTRY_SOLDIER:勢力)
防衛兵数 = COUNTRY_SOLDIER:勢力 - 攻撃兵数
;DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%の比率{比率}
;DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%の攻撃兵{攻撃兵数} 防衛兵{防衛兵数} 兵数{COUNTRY_SOLDIER:勢力}
RETURN 攻撃兵数, 防衛兵数

;-----------------------------------------------
;既存部隊に兵を補充する
;-----------------------------------------------
@SLG_AI_REPLENISH_SOLDIER_TO_UNIT(勢力, 攻撃兵数)
#DIM 勢力
#DIM 部隊
#DIM 項番
#DIM 攻撃兵数
#DIM 補充兵数
#DIM 残り補充兵数
#DIM 補充量
#DIM 部隊能力合計
#DIM 部隊能力, MAX_UNIT
#DIM 最強能力
VARSET 部隊能力合計
VARSET 部隊能力, __INT_MIN__

;部隊能力を合計していく
FOR 部隊, 0, MAX_UNIT
	SIF UNIT_SOLDIER:勢力:部隊 <= 0
		CONTINUE
	;敵がいるなら補充しない
	SIF TMP_IS_STAY_ENEMY_UNIT(UNIT_POSITION:勢力:部隊, 勢力) == 1
		CONTINUE
	;味方の勢力でなくても補充しない
	SIF TMP_COUNTRY_RELATION:勢力:(CITY_OWNER:(UNIT_POSITION:勢力:部隊)) == 0
		CONTINUE
	;確定兵数越えてても補充しない
	SIF UNIT_SOLDIER:勢力:部隊 >= AI_ARMY_PROPERTY:(COUNTRY_AI_TYPE:勢力):AI_確定兵数
		CONTINUE
	CALL GET_COMMANDER_ALL(勢力, 部隊)
	CALL SET_BATTLE_MIRROR_VAL(0, RESULT:0, RESULT:1, RESULT:2)
	CALL BATTLE_PREPARE_VARS_EACH(0, 0)
	部隊能力:部隊 = BATTLE_ATK:0 + BATTLE_DEF:0 + BATTLE_INT:0
	部隊能力合計 += 部隊能力:部隊
	;DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%の{部隊}部隊 部隊能力{部隊能力:部隊}
NEXT

;ついでに今作れる最強の部隊をみておく
CALL CHECK_UNIT_COMMANDER_BEST(勢力)
CALL SET_BATTLE_MIRROR_VAL(0, UNIT_COMMANDER_BEST:0, UNIT_COMMANDER_BEST:1, UNIT_COMMANDER_BEST:2)
CALL BATTLE_PREPARE_VARS_EACH(0, 0)
最強能力 = BATTLE_ATK:0 + BATTLE_DEF:0 + BATTLE_INT:0

;補充に使う兵数を決定する
;現存する最強の部隊の、今作れる最強の部隊に対する割合
部隊 = FINDELEMENT(部隊能力, MAXARRAY(部隊能力))
SIF 部隊能力:部隊 == __INT_MIN__
	RETURN 攻撃兵数
補充兵数 = MIN(攻撃兵数 * 部隊能力:部隊 / MAX(最強能力, 1), 攻撃兵数 * 70 / 100)
残り補充兵数 = 補充兵数
;DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%の攻撃兵数{攻撃兵数} 最強能力{最強能力} 現存最強部隊能力{部隊能力:部隊} 補充兵数{補充兵数}

FOR 項番, 0, MAX_UNIT
	部隊 = FINDELEMENT(部隊能力, MAXARRAY(部隊能力))
	;もう部隊がない場合、抜ける
	SIF 部隊能力:部隊 == __INT_MIN__
		BREAK

	;補充兵数から、（補充可能な部隊にしめる自部隊の能力の割合）ぶんだけ補充する
	;ただし、最低兵数割ってたら最低兵数ぶんだけ補充しようとする
	;いずれにせよ、残ってる補充兵数以上に補充できないのは当然
	IF UNIT_SOLDIER:勢力:部隊 < AI_ARMY_PROPERTY:(COUNTRY_AI_TYPE:勢力):AI_最低兵数
		補充量 = AI_ARMY_PROPERTY:(COUNTRY_AI_TYPE:勢力):AI_最低兵数 - UNIT_SOLDIER:勢力:部隊
	ELSE
		補充量 = 補充兵数 * 部隊能力:部隊 / 部隊能力合計
	ENDIF
	補充量 = MIN(補充量, 残り補充兵数)
	;DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%の{部隊}部隊に補充 補充前{UNIT_SOLDIER:勢力:部隊}　補充量{補充量} 補充後{UNIT_SOLDIER:勢力:部隊 + 補充量}
	;DEBUGPRINTFORML 残り補充兵数{残り補充兵数 - 補充量}
	UNIT_SOLDIER:勢力:部隊 += 補充量
	COUNTRY_SOLDIER:勢力 -= 補充量
	残り補充兵数 -= 補充量
	攻撃兵数 -= 補充量
	部隊能力:部隊 = __INT_MIN__
NEXT

RETURN 攻撃兵数


;-----------------------------------------------
;変なことになってる部隊を解体する
;-----------------------------------------------
@SLG_AI_FORCE_CLEAR_UNIT(勢力)
#DIM 勢力
#DIM 部隊

FOR 部隊, 0, MAX_UNIT
	SIF UNIT_SOLDIER:勢力:部隊 <= 0
		CONTINUE
	;現在地が停戦対象なら解散
	SIF TMP_COUNTRY_RELATION:勢力:(CITY_OWNER:(UNIT_POSITION:勢力:部隊)) == 1
		CALL CLEAR_UNIT(勢力, 部隊)
	;目的地が敵でないなら解散
	SIF TMP_COUNTRY_RELATION:勢力:(CITY_OWNER:(UNIT_TARGET:勢力:部隊)) != 0
		CALL CLEAR_UNIT(勢力, 部隊)
	;部隊の現在位置が中継地点かつ移動先を失っていれば解散する
	SIF !UNIT_TARGET:勢力:部隊 && CITY_TYPE:(UNIT_POSITION:勢力:部隊) == 1
		CALL CLEAR_UNIT(勢力, 部隊)
NEXT

;-----------------------------------------------
;部隊を救出する
;-----------------------------------------------
@SLG_AI_RESCUE(勢力, 攻撃兵数)
#DIM 勢力
#DIM 都市
#DIM 部隊
#DIM 攻撃兵数
#DIM 都市保有者
#DIM 防衛候補都市, MAX_CITY
#DIM 防衛スコア, MAX_CITY
#DIM 防衛スコア合計
#DIM 救援候補
#DIM 都市上部隊
#DIM 敵勢力
#DIM 敵部隊
#DIM 敵兵数, 20
#DIM 敵部隊能力, 20
#DIM 仮想敵兵数
#DIM 仮想敵能力
#DIM 部隊能力
#DIM 必要兵数
#DIM 補充兵数
#DIM ポジション
VARSET 防衛スコア
VARSET 防衛候補都市
VARSET 防衛スコア合計

;防衛スコアの合計を算出する
FOR 都市, 1, GET_CITY_NUM() + 1
	都市保有者 = CITY_OWNER:都市
	;敵がいないなら救援しない
	SIF !TMP_IS_STAY_ENEMY_UNIT(都市, 勢力)
		CONTINUE
	;助ける必要のないところなら放置
	SIF !(IS_COUNTRY(都市保有者) && GROUPMATCH(TMP_COUNTRY_RELATION:勢力:都市保有者, 2, 3, 4, 5))
		CONTINUE
	防衛スコア:都市 = TMP_DEFFENSIVE_IMPORTANCE:勢力:都市 * (TMP_COUNTRY_RELATION:勢力:都市保有者 == 5 ? 10 # 7) / 10
	防衛スコア合計 += 防衛スコア:都市
	;自国領土でも飛び地は放棄しがち
	SIF 都市保有者 == 勢力
		防衛スコア:都市 = 防衛スコア:都市 * TMP_ENCLAVE_SIZE:勢力:都市 / TMP_MAX_ENCLAVE_SIZE:勢力
NEXT

SIF 防衛スコア合計 == 0
	RETURN 攻撃兵数

;DEBUGPRINTFORML 防衛スコア合計:{防衛スコア合計}
WHILE 1
	;もっとも防衛スコアの高いところを救援にいく
	救援候補 = FINDELEMENT(防衛スコア, MAXARRAY(防衛スコア))
	;DEBUGPRINTFORML 救援候補:%GET_CITYNAME(救援候補)% 防衛スコア:{防衛スコア:救援候補}
	;10%ない,ないし防衛スコア0なら助けない
	SIF 防衛スコア:救援候補 < 防衛スコア合計 / 10 || 防衛スコア:救援候補 == 0
		BREAK

	VARSET 敵部隊能力
	VARSET 敵兵数
	;存在する敵部隊の能力を計算
	FOR 都市上部隊, 0, 20
		敵勢力 = TMP_UNIT_ONCITY_CNT:救援候補:都市上部隊
		敵部隊 = TMP_UNIT_ONCITY_NUM:救援候補:都市上部隊
		SIF !IS_COUNTRY(敵勢力) || TMP_COUNTRY_RELATION:勢力:敵勢力 != 0
			CONTINUE
		敵兵数:都市上部隊 = UNIT_SOLDIER:敵勢力:敵部隊
		CALL GET_COMMANDER_ALL(敵勢力, 敵部隊)
		CALL SET_BATTLE_MIRROR_VAL(0, RESULT:0, RESULT:1, RESULT:2)
		CALL BATTLE_PREPARE_VARS_EACH(0, 0)
		敵部隊能力:都市上部隊 = BATTLE_ATK:0 + BATTLE_DEF:0 + BATTLE_INT:0
	NEXT

	;敵の中で「もっとも多い兵数」「もっとも強い能力」を兼ね備える部隊を仮想敵とする
	仮想敵兵数 = 敵兵数:FINDELEMENT(敵兵数, MAXARRAY(敵兵数))
	仮想敵能力 = 敵部隊能力:FINDELEMENT(敵部隊能力, MAXARRAY(敵部隊能力))

	;既存の部隊を使う
	FOR 部隊, 0, MAX_UNIT
		SIF UNIT_SOLDIER:勢力:部隊 <= 0
			CONTINUE
		SIF UNIT_TARGET:勢力:部隊
			CONTINUE
		SIF TMP_IS_STAY_ENEMY_UNIT(UNIT_POSITION:勢力:部隊, 勢力) == 1
			CONTINUE
		SIF TMP_COUNTRY_RELATION:勢力:(CITY_OWNER:(UNIT_POSITION:勢力:部隊)) == 0
			CONTINUE
		CALL GET_COMMANDER_ALL(勢力, 部隊)
		CALL SET_BATTLE_MIRROR_VAL(0, RESULT:0, RESULT:1, RESULT:2)
		CALL BATTLE_PREPARE_VARS_EACH(0, 0)
		部隊能力 = BATTLE_ATK:0 + BATTLE_DEF:0 + BATTLE_INT:0
		必要兵数 = 仮想敵兵数 * (部隊能力 >= 仮想敵能力 ? 80 # 120) / 100
		;敵部隊の能力の80%ないなら、まず勝てないので諦める
		SIF 部隊能力 < 仮想敵能力 * 4 / 5
			CONTINUE
		;攻撃兵数と部隊兵数足して仮想敵の(能力で勝ってるなら80%、負けてるなら120%）ないなら、まず勝てないので諦める
		SIF 攻撃兵数 + UNIT_SOLDIER:勢力:部隊 < 必要兵数
			CONTINUE
		;補充
		IF UNIT_SOLDIER:勢力:部隊 < 必要兵数
			補充兵数 = MIN(必要兵数 - UNIT_SOLDIER:勢力:部隊, 攻撃兵数)
			UNIT_SOLDIER:勢力:部隊 += 補充兵数
			攻撃兵数 -= 補充兵数
			COUNTRY_SOLDIER:勢力 -= 補充兵数
		ENDIF
		CALL MOVE_UNIT(勢力, 部隊, 救援候補, 1)
		GOTO DONE
		BREAK
	NEXT

	;派遣してなければ新規部隊を検討
	FOR 部隊, 0, MAX_UNIT
		SIF UNIT_SOLDIER:勢力:部隊 > 0
			CONTINUE
		CALL CHECK_UNIT_COMMANDER_BEST(勢力)
		CALL SET_BATTLE_MIRROR_VAL(0, UNIT_COMMANDER_BEST:0, UNIT_COMMANDER_BEST:1, UNIT_COMMANDER_BEST:2)
		CALL BATTLE_PREPARE_VARS_EACH(0, 0)
		部隊能力 = BATTLE_ATK:0 + BATTLE_DEF:0 + BATTLE_INT:0
		必要兵数 = 仮想敵兵数 * (部隊能力 >= 仮想敵能力 ? 80 # 120) / 100
		SIF 部隊能力 < 仮想敵能力 * 4 / 5
			CONTINUE
		SIF 攻撃兵数 < 必要兵数
			CONTINUE
		UNIT_SOLDIER:勢力:部隊 = 必要兵数
		攻撃兵数 -= 必要兵数
		COUNTRY_SOLDIER:勢力 -= 必要兵数
		FOR ポジション, 0, MAX_UNIT_COMMANDER
			SIF UNIT_COMMANDER_BEST:ポジション == -1
				BREAK
			CALL SET_UNIT_COMMANDER(勢力, 部隊, ポジション, UNIT_COMMANDER_BEST:ポジション)
			;IS_FREE_MAPを直接書き換えたほうが速い
			TMP_IS_FREE:(UNIT_COMMANDER_BEST:ポジション):0 = 1
		NEXT
		;PRINTFORML 救出部隊作成 兵数{UNIT_SOLDIER:勢力:部隊}
		CALL MOVE_UNIT(勢力, 部隊, 救援候補, 1)
	NEXT

	$DONE
	防衛スコア:救援候補 = 0
WEND

RETURN 攻撃兵数

;-------------------------------------------------
;国庫を消費して徴兵を行うかの判定
;-------------------------------------------------
@AI_DEPLOY_ARMY(勢力)
#DIM 勢力
#DIM 雇用レート
#DIM 雇用兵数限界
#DIM 雇用兵数
#DIM 兵数限界
#DIM 留保額
雇用レート = SLG_EXTRA_DRAFT_CALC_RATE(勢力)
;雇用兵数は最大でも(国庫-残しとくぶん) / 雇用レート
;勢力が劣っている場合、留保額は小さくなる（徴兵に力を注ぐ）
留保額 = MONEY:勢力 * AI_DEPLOY:(COUNTRY_AI_TYPE:勢力):(TMP_COUNTRY_STARS:勢力 > 2 ? 1 # 2) / 100
雇用兵数限界 = (MONEY:勢力 - 留保額) / 雇用レート
;兵数限界は徴兵による限界に、勢力ごとの特色を足したもの
兵数限界 = TMP_SUM_ECONOMY:勢力 / 10 * AI_DEPLOY:(COUNTRY_AI_TYPE:勢力):0 / 100

;（雇用できる数＋現在の兵力）が経済力ベースの兵数限界を越えていて、かつ★３以上の勢力なら、兵数限界を超えないよう徴兵
IF 雇用兵数限界 + TMP_SUM_SOLDIER:勢力 > 兵数限界 && TMP_COUNTRY_STARS:勢力 > 2
	雇用兵数 = 兵数限界 - TMP_SUM_SOLDIER:勢力 
;上記条件を満たさないなら、雇用できるだけ雇用する
ELSE
	雇用兵数 = 雇用兵数限界
ENDIF

SIF 雇用兵数 <= 0
	RETURN

MONEY:勢力 -= 雇用レート * 雇用兵数
COUNTRY_SOLDIER:勢力 += 雇用兵数
TMP_SUM_SOLDIER:勢力 += 雇用兵数


;DEBUGPRINTFORML {DAY, 3}【緊急動員（\@ARG:1 ? 防 # 攻 \@）】%ANAME(GET_COUNTRY_BOSS(ARG:0))%:支払{SELECTOR:5}/{ECONOMY / 100}→徴兵{SELECTOR:4}/{MILITARY_LIMIT}
SIF 勢力 == CFLAG:MASTER:所属 || FLAG:観戦モード
		PRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%は{雇用レート * 雇用兵数}の資金を払い兵を{雇用兵数}動員しました


;-------------------------------------------------
;部隊を生成する
;-------------------------------------------------
@SLG_AI_CREATE_UNIT(勢力, 部隊, 攻撃兵数)
#DIM 勢力
#DIM 部隊
#DIM 攻撃兵数
#DIM 出兵難易度, 2
#DIM 兵数候補
#DIM 最低兵数
#DIM 確定兵数
#DIM 出兵数
#DIM ポジション
#DIM AI_TYPE


AI_TYPE = COUNTRY_AI_TYPE:勢力
最低兵数 = AI_ARMY_PROPERTY:AI_TYPE:AI_最低兵数 / MAX(6 - TMP_OWN_CITY:勢力, 1)
確定兵数 = MIN(AI_ARMY_PROPERTY:AI_TYPE:AI_確定兵数, TMP_SUM_ECONOMY:勢力 * 10)
;DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(勢力))%の部隊作成試行 攻撃兵数{攻撃兵数} 最低兵数{最低兵数} 確定兵数{確定兵数}

;兵数が最低割ってたら部隊は作らない
SIF 攻撃兵数 < 最低兵数
	RETURN 攻撃兵数

;兵数が確定兵数を割っているなら、確定兵数に対する攻撃兵数の割合%で出兵する
;ただし都市数が少ないと積極的
IF 攻撃兵数 < 確定兵数
	SIF 攻撃兵数 * 100 / 確定兵数 < RAND:(100 - MAX((6 - TMP_OWN_CITY:勢力) * 10, 0))
		RETURN 攻撃兵数
ENDIF

CALL CHECK_UNIT_COMMANDER_BEST(勢力)
;DEBUGPRINTFORML 部隊作成 RESULT:0 {UNIT_COMMANDER_BEST:0} RESULT:1 {UNIT_COMMANDER_BEST:1} RESULT:2 {UNIT_COMMANDER_BEST:2}


最低兵数 *= MIN(MAX(MATCH(UNIT_COMMANDER_BEST, -1) * 3, 1), 確定兵数 - 1)
;DEBUGPRINTFORML 補正後最低兵数{最低兵数} 確定兵数{確定兵数}
;武将
;SIF MATCH(武将候補, -1) == 3
;	RETURN 攻撃兵数

;部隊に編成する兵数を決定
IF 攻撃兵数 >= 確定兵数
	出兵数 = 確定兵数
ELSE
	出兵数 = MIN(RAND(最低兵数, 確定兵数), 攻撃兵数)
ENDIF

UNIT_SOLDIER:勢力:部隊 = 出兵数
COUNTRY_SOLDIER:勢力 -= 出兵数
攻撃兵数 -= 出兵数
FOR ポジション, 0, MAX_UNIT_COMMANDER
	SIF UNIT_COMMANDER_BEST:ポジション == -1
		CONTINUE
	CALL SET_UNIT_COMMANDER(勢力, 部隊, ポジション, UNIT_COMMANDER_BEST:ポジション)
	;IS_FREE_MAPを直接書き換えたほうが速い
	TMP_IS_FREE:(UNIT_COMMANDER_BEST:ポジション):0 = 1
NEXT

;DEBUGPRINTFORML 部隊作成 兵数{UNIT_SOLDIER:勢力:部隊}

RETURN 攻撃兵数

;-------------------------------------------------
;部隊の攻撃先を決定する
;-------------------------------------------------
@SLG_AI_INVASION_SETTARGET(勢力, 部隊)
#DIM 勢力
#DIM 部隊, 2
#DIM 都市
#DIM 攻撃候補スコア, MAX_CITY
#DIM 次のスコア
#DIM 関係性
#DIM 君主
#DIM 都市保有勢力
#DIM 都市保有君主
#DIM 攻撃候補
#DIM 現在スコア
#DIM 自部隊能力, 3
#DIM 敵部隊能力, 3
#DIM 候補

VARSET 攻撃候補スコア, __INT_MIN__
君主 = GET_COUNTRY_BOSS(勢力)

CALL GET_UNIT_COMMANDER_ALL(勢力, 部隊)
CALL SET_BATTLE_MIRROR_VAL(0, RESULT:0, RESULT:1, RESULT:2)
CALL BATTLE_PREPARE_VARS_EACH(0, 0)
自部隊能力:0 = BATTLE_ATK:0
自部隊能力:1 = BATTLE_DEF:0
自部隊能力:2 = BATTLE_INT:0

;スコアを計算
FOR 都市, 1, GET_CITY_NUM() + 1
	SIF !TMP_IS_INVADABLE:勢力:都市
		CONTINUE

	都市保有勢力 = CITY_OWNER:都市
	都市保有君主 = GET_COUNTRY_BOSS(都市保有勢力)

	攻撃候補スコア:都市 = TMP_OFFENSIVE_IMPORTANCE:勢力:都市 * RAND(80, 120)

	;関係が悪いほど狙われやすい
	関係性 = IS_COUNTRY(都市保有勢力) ? 1500 + REL_LIKE:君主:都市保有君主 - REL_HATE:君主:都市保有君主 # 1500
	関係性 = 関係性 * 100 / 3000

	攻撃候補スコア:都市 = 攻撃候補スコア:都市 * 関係性 / 100
	;直接つながってないなら2/3
	攻撃候補スコア:都市 = 攻撃候補スコア:都市 * (TMP_CONNECTED_TO_US:勢力:都市 + 2) / 3
	;最大の飛び地に対する攻撃元の飛び地サイズの比
	攻撃候補スコア:都市 = 攻撃候補スコア:都市 * MAX(TMP_ENCLAVE_SIZE:勢力:(TMP_IS_INVADABLE:勢力:都市), 1) / TMP_MAX_ENCLAVE_SIZE:勢力

	;自国のほうが大きいなら、都市数の差1につき10%狙いやすくする
	;自国のほうが小さいなら、都市数の差1につき6%狙いやすくする
	IF IS_COUNTRY(都市保有勢力)
		IF TMP_OWN_CITY:勢力 > TMP_OWN_CITY:都市保有勢力
			攻撃候補スコア:都市 = 攻撃候補スコア:都市 + 攻撃候補スコア:都市 * (TMP_OWN_CITY:勢力 - TMP_OWN_CITY:都市保有勢力) * 10 / 100
		ELSE
			攻撃候補スコア:都市 = 攻撃候補スコア:都市 + 攻撃候補スコア:都市 * (TMP_OWN_CITY:都市保有勢力 - TMP_OWN_CITY:勢力) * 6 / 100
		ENDIF
		;都市勢力が連合の討伐対象なら攻撃候補スコアを5倍に
		SIF TMP_COUNTRY_UNION_TARGET:勢力 == 都市保有勢力
			攻撃候補スコア:都市 *= 5
	;無所属都市は優先的に狙う
	ELSE
		攻撃候補スコア:都市 *= 2
	ENDIF

	;主人公の都市に対しては難易度補正
	SIF 都市保有勢力 == CFLAG:MASTER:所属
		攻撃候補スコア:都市 = 攻撃候補スコア:都市 * GET_DIFFICULTY_CORRECTION() / 100

	;同盟か停戦したい相手の都市なら1/3に
	SIF GROUPMATCH(CHECK_AI_DIPLOMACY_PLAN(勢力, 都市保有勢力), AI_外交計画_停戦, AI_外交計画_同盟)
		攻撃候補スコア:都市 /= 3

	;特殊勢力同士はバイアスがかかる	
	SIF IS_SP_COUNTRY(勢力) && IS_SP_COUNTRY(都市保有勢力)
		攻撃候補スコア:都市 /= 3

	;中継地点を経由する場合は軽視する
	SIF TMP_IS_BYPASS:勢力:都市
		攻撃候補スコア:都市 /= 2

	;特に序盤は固定されがちなので揺らがせる
	攻撃候補スコア:都市 = 攻撃候補スコア:都市 * RAND(80, 120) / 100
NEXT

;候補上位10個をみる
FOR 候補, 0, 10

	攻撃候補 = FINDELEMENT(攻撃候補スコア, MAXARRAY(攻撃候補スコア))

	;DEBUGPRINTFORML 攻撃候補 %GET_CITYNAME(攻撃候補)% スコア{攻撃候補スコア:攻撃候補}

	;攻撃候補でないものだったら戻す
	SIF 攻撃候補スコア:攻撃候補 == __INT_MIN__
		BREAK

	現在スコア = 攻撃候補スコア:攻撃候補
	攻撃候補スコア:攻撃候補 = __INT_MIN__

	次のスコア = MAXARRAY(攻撃候補スコア)
	;すでにそこを狙っている部隊を探す
	FOR 部隊:1, 0, MAX_UNIT
		SIF UNIT_SOLDIER:勢力:(部隊:1) <= 0
			CONTINUE
		SIF 部隊:1 == 部隊
			CONTINUE
		SIF UNIT_TARGET:勢力:(部隊:1) != 攻撃候補 && UNIT_POSITION:勢力:(部隊:1) != 攻撃候補
			CONTINUE
		;DEBUGPRINTFORML すでに狙われている
		次のスコア = 次のスコア * 15 / 10
		;DEBUGPRINTFORML 現在スコア{現在スコア} 次のスコア{次のスコア}
		;すでにそこは狙われているか自部隊がいて、スコアが次のやつの部隊一つにつき1.5倍ないなら戻す
		SIF 現在スコア < 次のスコア
			GOTO CANCEL
	NEXT

	都市保有勢力 = CITY_OWNER:攻撃候補
	都市保有君主 = GET_COUNTRY_BOSS(都市保有勢力)

	IF IS_COUNTRY(都市保有勢力)
		CALL CHECK_CITY_COMMANDER_BEST(攻撃候補, 1)
		CALL SET_BATTLE_MIRROR_VAL(1, CITY_COMMANDER_BEST:0, CITY_COMMANDER_BEST:1, -1)
		CALL BATTLE_PREPARE_VARS_EACH(1, 攻撃候補)
	ELSE
		CALL SET_BATTLE_MIRROR_VAL(1, -1, -1)
		CALL BATTLE_PREPARE_VARS_EACH(1, 攻撃候補)
	ENDIF

	;勝ってる要素をカウント
	;カウント = 0
	;敵部隊能力:0 = BATTLE_ATK:1
	;敵部隊能力:1 = BATTLE_DEF:1
	;敵部隊能力:2 = BATTLE_INT:1
	;カウント += (UNIT_SOLDIER:勢力:部隊 > CITY_SOLDIER:攻撃候補)
	;FOR LOCAL:1, 0, 3
	;	カウント += 自部隊能力:(LOCAL:1) > 敵部隊能力:(LOCAL:1)
	;NEXT

	;;勝ってる要素が一定ないとキャンセル
	;SIF カウント < 2
	;	GOTO CALCEL
	CALL MOVE_UNIT(勢力, 部隊, TMP_IS_INVADABLE:勢力:攻撃候補, 1)
	UNIT_TARGET:勢力:部隊 = 攻撃候補

	;DEBUGPRINTFORML 攻撃地点を%GET_CITYNAME(UNIT_TARGET:勢力:部隊)%に確定
	;DEBUGPRINTFORML 出発地点を%GET_CITYNAME(UNIT_POSITION:勢力:部隊)%に確定
	BREAK
	$CANCEL
NEXT
;DEBUGPRINTFORML 侵攻先:%GET_CITYNAME(UNIT_TARGET:勢力:部隊)% 位置:{UNIT_POSITION:勢力:部隊}
$DONE
;-----------------------------------------------
;防衛
;-----------------------------------------------
@SLG_AI_DEFENSE(勢力)
#DIM 勢力
#DIM 部隊
#DIM 防衛スコア, MAX_CITY
#DIM 防衛スコア合計
#DIM 初期兵数
#DIM 振り分け兵数
#DIM 都市数
#DIM 都市
#DIM 武将数
#DIM 部隊防衛フラグ, MAX_UNIT
#DIM ポジション
#DIM 項番
VARSET 防衛スコア合計
VARSET 防衛スコア, __INT_MIN__
VARSET 部隊防衛フラグ


初期兵数 = COUNTRY_SOLDIER:勢力
武将数 = TMP_GET_IS_FREE_NUM(勢力)

都市数 = 0
;まずスコアを記録
FOR 都市, 1, GET_CITY_NUM() + 1
	;そこが自勢力の都市で、敵と接続しているなら、防衛スコアに加算
	;最大飛び地でないなら、最大飛び地に対する飛び地サイズの比だけ軽減される
	IF CITY_OWNER:都市 == 勢力 && TMP_CITY_RISK:勢力:都市 >= 2
		;敵がいる都市はダメ
		SIF TMP_IS_STAY_ENEMY_UNIT(都市, 勢力) == 1
			CONTINUE
		防衛スコア:都市 = TMP_DEFFENSIVE_IMPORTANCE:勢力:都市 * TMP_ENCLAVE_SIZE:勢力:都市 / TMP_MAX_ENCLAVE_SIZE:勢力
		防衛スコア合計 += 防衛スコア:都市
		都市数 ++
	ENDIF
NEXT

SIF 都市数 == 0
	RETURN
;兵力振り分け＋武将振り分け
;武将振り分けの都合、大きい順に取得します
FOR 項番, 0, 都市数
	都市 = FINDELEMENT(防衛スコア, MAXARRAY(防衛スコア))
	SIF 防衛スコア:都市 == __INT_MIN__
		BREAK
	SIF COUNTRY_SOLDIER:勢力 <= 0
		CONTINUE
	;全体に対するスコアの割合で
	振り分け兵数 = 初期兵数 * 防衛スコア:都市 / 防衛スコア合計
	CITY_SOLDIER:都市 = MIN(振り分け兵数, COUNTRY_SOLDIER:勢力)
	COUNTRY_SOLDIER:勢力 = MAX(COUNTRY_SOLDIER:勢力 - 振り分け兵数, 0)
	;DEBUGPRINTFORML COUNTRY_SOLDIER:{COUNTRY_SOLDIER:勢力}
	;既存部隊の配置
	FOR 部隊, 0, MAX_UNIT
		SIF UNIT_SOLDIER:勢力:部隊 <= 0
			CONTINUE
		SIF UNIT_TARGET:勢力:部隊
			CONTINUE
		SIF TMP_IS_STAY_ENEMY_UNIT(UNIT_POSITION:勢力:部隊, 勢力) == 1
			CONTINUE
		SIF TMP_COUNTRY_RELATION:勢力:(CITY_OWNER:(UNIT_POSITION:勢力:部隊)) == 0
			CONTINUE
		SIF 部隊防衛フラグ:部隊
			CONTINUE
		CALL MOVE_UNIT(勢力, 部隊, 都市, 1)
		部隊防衛フラグ:部隊 = 1
		BREAK
	NEXT
	;武将配置
	;余裕があれば2人配置
	IF 武将数
		CALL CHECK_CITY_COMMANDER_BEST(都市, TMP_GET_IS_FREE_NUM(勢力) >= 都市数 + 1)
		FOR ポジション, 0, VARSIZE("MAX_CITY_COMMANDER")
			SIF CITY_COMMANDER_BEST:ポジション == -1
				CONTINUE
			武将数 --
			;CREATE_IS_FREE_MAPを呼んだほうが安全だが、ここで呼ぶには遅い。IS_FREE_MAPを直接書き換えたほうが速い
			TMP_IS_FREE:(CITY_COMMANDER_BEST:ポジション):0 = 2
			CALL SET_CITY_COMMANDER(都市, ポジション, CITY_COMMANDER_BEST:ポジション)
		NEXT
	ENDIF
	防衛スコア:都市 = __INT_MIN__
	;DEBUGPRINTFORML %GET_CITYNAME(都市)%の防衛兵 {CITY_SOLDIER:都市}
NEXT
